[ { "title": "Black Mouse pointer in Windows 11", "url": "/posts/Black-Cursor-Windows11/", "categories": "Technology, Windows 11", "tags": "Windows 11, Black Mouse pointer", "date": "2021-12-29 13:00:00 +0530", "snippet": "Windows 11 bundles with lots of new and exciting features. There are a plethora of changes in look and feel on UI. With ‘Accessibility’ settings, Microsoft has taken a giant leap in order to improve computer accessibility for differently-abled persons. The mouse pointer for Windows 11 by default is white in color with a black outline. Few users with poor vision could have some difficulty with this color. To fix this issue Windows 11 allows users to choose a black or colored pointer. A circle on the screen can be seen where we touch it with ‘Touch Indicator’.Change Mouse pointer color in Accessibility settingsHere is how to change the Mouse pointer color setting From the search bar type and open the ‘Settings’ app On the panel left side click on ‘Accessibility’ to open up different options. Click on ‘Mouser Pointer and touch’ Select the 2nd option to get a black/dark mouse pointer. Fig. 1 - Steps to update Windows 11 mouse pointer to black’ Fig. 2 - Selection of dark/black mouse pointer One can also change the mouse pointer to any desired color of mouser pointer by clicking on the ‘Custom’ option and then selecting the desired color. The desired size of the pointer can also be adjusted using the ‘Size’ sliderConclusionThe mouse pointer for Windows 11 by default is white in color with a black outline. Few users with poor vision could have some difficulty with this color and that can be changed via Accessibility settings.Hope this information is useful next time when you need it!" }, { "title": "Converting JSON object to C# class in Visual Studio", "url": "/posts/JSON-to-CSharp-Class-VS/", "categories": "Technology, Visual Studio 2022", "tags": "VS Tips and Tricks", "date": "2021-12-20 03:00:00 +0530", "snippet": " Fig. 1 - Visual Studio option to ‘Paste JSON as Class’ JSON stands for Javascript Object Notation used for storing and transferring data. Converting a JSON object to C# class type is one of the common scenarios in cases where both sender and receiver agree upon a predefined set of message contracts. Especially in an event-driven messaging architecture system (such as Azure Service Bus, Rabbit MQ, etc.)The benefits of having to read a C# class object rather than reading JSON object properties is that it eliminates any typos and provides compile-time errors(if any)There are quite a few websites that allow converting a JSON object to C# class object e.g: https://json2csharp.com/, https://www.site24x7.com/tools/json-to-csharp.html, etc. Some of these sites might store your inputs in their servers(you never know). It is not safe to use if you input a JSON object that is part of your company/client data.VS Studio out of the box provides this feature if the ASP.NET and Web Development workload is installed during Visual Studio installation. Here is how to use it: Create a new class file (.cs for C#) and remove all pre-defined code inside ( Right-click on project -&amp;gt; Add -&amp;gt; Class) Copy JSON data to clipboard Open the .cs file and navigate to Edit -&amp;gt; Paste Special -&amp;gt; Paste JSON as Class{Employees: [{ &quot;id&quot;: 1, &quot;first_name&quot;: &quot;Jean&quot;, &quot;last_name&quot;: &quot;Penn&quot;, &quot;email&quot;: &quot;jeanenn@abc.org&quot;, &quot;gender&quot;: &quot;Female&quot;, &quot;ip_address&quot;: &quot;26.55.193.2&quot;}, { &quot;id&quot;: 2, &quot;first_name&quot;: &quot;Giovani&quot;, &quot;last_name&quot;: &quot;Fred&quot;, &quot;email&quot;: &quot;gfred1@abc.ord&quot;, &quot;gender&quot;: &quot;Male&quot;, &quot;ip_address&quot;: &quot;209.109.4.212&quot;}, { &quot;id&quot;: 3, &quot;first_name&quot;: &quot;Ed&quot;, &quot;last_name&quot;: &quot;Boyce&quot;, &quot;email&quot;: &quot;edboyce@abc.org&quot;, &quot;gender&quot;: &quot;Female&quot;, &quot;ip_address&quot;: &quot;192.66.142.244&quot;}, { &quot;id&quot;: 4, &quot;first_name&quot;: &quot;Will&quot;, &quot;last_name&quot;: &quot;Smith&quot;, &quot;email&quot;: &quot;wsmith3@abc.org&quot;, &quot;gender&quot;: &quot;Male&quot;, &quot;ip_address&quot;: &quot;96.66.148.14&quot;}]} public class EmployeeList { public Employee[] Employees { get; set; } } public class Employee { public int id { get; set; } public string first_name { get; set; } public string last_name { get; set; } public string email { get; set; } public string gender { get; set; } public string ip_address { get; set; } }Note: Make sure that the JSON copied to the clipboard is valid and well-formatted(Use Notepad++ for this) else VS will throw an error as shown below: Fig. 2 - Error in case of invalid JSON being pasted using ‘Paste Special’ in VS Hope this information is useful next time when you need it!" }, { "title": "Global Using in C# 10", "url": "/posts/Global-Using-In-CSharp10/", "categories": "Technology, C#10", "tags": "C# 10 Global Using", "date": "2021-07-25 22:00:00 +0530", "snippet": "Every C# class file begins with a list of using statements that are necessary for implementation. Much of this code is repetitive and takes up more bytes in files.If we create an ASP NET Core Web Application(MVC) with Visual Studio 2022 preview or higher with .NET 6 SDK we will be getting the below code in HomeController.csusing GlobalUsingsDemoApp.Models;using Microsoft.AspNetCore.Mvc;using Microsoft.Extensions.Logging;using System;using System.Collections.Generic;using System.Diagnostics;using System.Linq;using System.Threading.Tasks;namespace GlobalUsingsDemoApp.Controllers{ public class HomeController : Controller { private readonly ILogger&amp;lt;HomeController&amp;gt; _logger; public HomeController(ILogger&amp;lt;HomeController&amp;gt; logger) { _logger = logger; } public IActionResult Index() { return View(); } public IActionResult Privacy() { return View(); } [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() { return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier }); } }}As you can see from above that most of these namespaces imported here are likely to be required in other .cs files as well. The developer will end up writing multiple imports of the same namespace in multiple .cs files. To Avoid this with C# 10.0 Microsoft introduced the concept of declaring and importing namespaces globally.Adding Global ‘Using.cs’ file to a project in .NET 6Add a new file called Using.cs (can be added to the project root level. The name of the file can be anything) and start importing most likely used namespaces in this file by prefixing with global keyword.The content of Using.cs will be:global using GlobalUsingsDemoApp.Models;global using Microsoft.AspNetCore.Mvc;global using Microsoft.Extensions.Logging;global using System;global using System.Collections.Generic;global using System.Diagnostics;global using System.Linq;global using System.Threading.Tasks;That’s it! Now your HomeController.cs can be simplified and it can start referring classes defined namespaces present in Using.csnamespace GlobalUsingsDemoApp.Controllers{ public class HomeController : Controller { private readonly ILogger&amp;lt;HomeController&amp;gt; _logger; public HomeController(ILogger&amp;lt;HomeController&amp;gt; logger) { _logger = logger; } public IActionResult Index() { return View(); } public IActionResult Privacy() { return View(); } [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() { return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier }); } }}Combining Top-level statements(.NET 5) with global using in C#Top-level statements enable developers to avoid the extra ceremony required by placing the program’s entry point in a static method in a class. The typical starting point for a new console application looks like the following code:using System;namespace Application{ class Program { static void Main(string[] args) { Console.WriteLine(&quot;Hello World!&quot;); } }}Above 11 lines contain only one line of executable code Console.WriteLine(&quot;Hello World!&quot;);. You can simplify that program with the new top-level statements feature. That enables to remove all but two of the lines in this program:using System;Console.WriteLine(args);We need not declare args variable. For the single source file that contains your top-level statements, the compiler recognizes args to mean the command-line arguments. The type of args is a string[], as in all C# programs.With global using C# 10.0 feature, the console app code can be reduced to 1 line!Console.WriteLine(args);When should you not move an import statement to global using?Moving functionality specific namepsaces to global using is not recommended always. At times it may reduce the readibilty for a new developer looking at the code. For example moving Microsoft.AspNetCore.SignalR to global using may not provide an idea to developer that the functionality deals with SignalR.using System;using System.Threading.Tasks;using Microsoft.AspNetCore.SignalR;public class ViewHub : Hub{ public static int ViewCount {get;set;} = 0; public async Task NotifyWatching(){ ViewCount++; await this.Clients.All.SendAsync(&quot;viewCountUpdate&quot;, ViewCount); }}Hence the ideal approach would be to move System and System.Threading.Tasks to Using.cs and retain Microsoft.AspNetCore.SignalR in same file:using Microsoft.AspNetCore.SignalR;public class ViewHub : Hub{ public static int ViewCount {get;set;} = 0; public async Task NotifyWatching(){ ViewCount++; await this.Clients.All.SendAsync(&quot;viewCountUpdate&quot;, ViewCount); }}ConclusionWith global using C# 10.0 feature Microsoft has reduced overhead of importing namepsaces and when combined with other .NET features such as Top-level statements, they simplify a lot of things for developers." }, { "title": "Build a Minimal API in .NET 6", "url": "/posts/Minimal-API-ASPNET-6/", "categories": "Technology, .NET 6", "tags": ".NET 6 Minimal API", "date": "2021-07-17 19:15:00 +0530", "snippet": "Building lightweight APIs in ASP. NET Core was not possible until .NET 6. Developers were confined to use the MVC pattern of Web API’s which was a bit overwhelming for beginners.The conventional ASP. NET Core API’s/Web projects involved lot of ceremonies associated with them: Program.cs file will have Main method calling CreateHostBuilder method. CreateHostBuilder will call CreateDefaultBuilder method which configures bunch of defaults such as logging, configuration in a specific order. ConfigureWebHostDefaults will be invoked to use Startup.cs file. Startup.cs has Configure and ConfigureServices methods to configure HTTP request pipeline and handle Dependency Injection(DI). Fig. 1 - Ceremonies involved in a conventional ASP.NET Core APIsImagine if a novice developer is trying to understand the above bits of defaults whose intention is to quickly build an API endpoint! Sounds too complicated, isn’t it?What is a Minimal API?The idea of Minimal API is to let developers start with simple APIs (i.e. fewer ceremonies) and then start building on top of it. This is really helpful for developers who are new to the ASP. NET Core ecosystem.Minimal API’s also help to build smaller microservices-based API’sCreating a Minimal API project in .NET 6Open windows terminal/command prompt from any folder and type the below command and open the folder in Visual Studio. Please ensure you have at least .NET 6 preview 6 SDK version installed for this to work.dotnet new web -o MinApi Fig. 2 - MinApi project template scaffolding in Visual Studio 2022 PreviewThat’s it! You have your first minimal API ready. Whatever goes into the lambda function (2nd parameter to MapGet method) below acts as an API endpoint.app.MapGet(&quot;/&quot;, () =&amp;gt; &quot;Hello World!&quot;);To see the real benefits of minimal API examine carefully how we can simplify an MVC scaffolded API controller, please refer to the below screenshot:Each of the HTTP verbs get mapped to app.Map&amp;lt;HttpVerb&amp;gt;() methods in minimal API. Fig. 3 - API methods of a conventional APiController versus Minimal APIIt is evident from above that developers can now write APIs in ASP. NET Core with fewer lines of code in a simpler way! Having said that, minimal APIs doesnt take away any of .NET Core features. All it does is to reduce API boilerplate code.How Dependency Injection works with Minimal API?Let us say if we want to offload the logic of the API endpoint to a separate file or a service rather than writing inside a lambda function. This can be achieved by importing Microsoft.Extensions.DependencyInjection namespace. The below example shows how to invoke a service method inside app.MapGet method.ToDoService.cs file: namespace MinApi.ToDoService{ public interface IToDoService { string GetTask(int id); } public class ToDoService : IToDoService { public string GetTask(int id) { return $&quot;Task # {id.ToString()}&quot;; } }}Program.cs file:using Microsoft.AspNetCore.Builder;using Microsoft.AspNetCore.Http;using Microsoft.Extensions.DependencyInjection;using Microsoft.Extensions.Hosting;using MinApi.ToDoService;var builder = WebApplication.CreateBuilder(args);builder.Services.AddSingleton&amp;lt;IToDoService, ToDoService&amp;gt;(); var app = builder.Build();if (app.Environment.IsDevelopment()){ app.UseDeveloperExceptionPage();}app.MapGet(&quot;/GetTask/{id}&quot;, (HttpContext context, ToDoService todoService, int id) =&amp;gt; { context.Response.WriteAsync(todoService.GetTask(id)); });app.Run();For more information on Minimal API please refer to the below video from David Fowler, Damian Edwards, Stephen Halter and Jon Galloway showcased in ASP. NET Community Standup - Minimal APIsPS: Minimal API in .NET 6 is still in preview phase. Some of the internals of Minimal API may change when a stable .NET 6 release hits the market around November 2021." }, { "title": "Refresh button missing from right click context menu in Windows 11", "url": "/posts/Windows11-Refresh-Button-Missing/", "categories": "Technology, Windows 11", "tags": "Windows 11", "date": "2021-07-09 02:35:00 +0530", "snippet": "Ever since Microsoft announced Windows 11 OS it has been hogging limelight due to its new and exciting features. However, the initial Microsoft Insider Preview build of Windows 11 had ‘Refresh’ option missing under right click context menu. Though the option was missing from its usual location , it was atill available upon clicking “Show more options” in right click context menu. This is used to display the conventional Windows right click context menu as shown in below image: Fig. 1 - Refresh option present under ‘Show More options’ in earlier Windows 11 builds Netizens were quick enough to point out this bug/missing feature. After facing much of the flak from users, Microsoft has managed to fix this pretty quickly in one of the newer Windows 11 build (OS Build 22000.65) Fig. 2 - Refresh present in right click context menu in latest Windows 11 build Happy to see “Refresh” option back in right click context menu!" }, { "title": "Visual Studio 2022 will be a 64 bit application and how?", "url": "/posts/Visual-Studio-2022-Preview/", "categories": "Technology, Visual Studio 2022", "tags": "VS2022", "date": "2021-06-25 20:20:00 +0530", "snippet": "Microsoft has recently announced the Visual Studio 2022 preview version which promises to be faster, more lightweight, better scalability for the enterprise large scale solutions. One of the key highlights in Visual Studio 2022 is that the core devenv.exe process will be a 64-bit application. It will have much more advantages of getting a larger data set, using more CPU registers, and taking advantage of more than 4GB of memory. Developers can build more complex solution without running out of memory; open larger-scale solutions without slowing down overall Visual Studio performance. Fig. 1 - devenv.exe process of VS 2019 vs VS 2022 preview Earlier versions Visual Studio (upto VS 2019) happened to be a 32-bit application, however few of internal components such as MSBuild.exe, Microsoft.ServiceHub.Controller.exe would work with the 64-bit process and expand to 64 bit as needed. Fig. 2 - Process Explorer showing various 32/64 bit exe’s running under devenv.exe One important point to remember is that Visual Studio can create and run 64-bit applications on 64-bit computers for a long time, but it remained a 32-bit application itself and it can access up to 4 GB of maximum memory.The devenv.exe file installation location for VS 2019 community versus VS 2022 Community preview clearly highlights this:C:\\Program Files\\Microsoft Visual Studio\\2022\\Preview\\Common7\\IDEC:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDEIf we open any ASP.NET project in Visual Studio, we could always target the application platform to be 32 bit or 64 system. Fig. 3 - Target platform options available for 32 bit devenv.exe Conclusion A 32-bit operating system cannot take full advantage of 64 bit features hence Visual Studio 2022 is shipped as 64 bit application. The architecture of Visual Studio 2022 will remain same as earlier versions, with only additional advantages of support of 64-bit for a 64-bit operating system. 64 bit application enables faster performance while loading complex solutions (with 100s of projects) without running out of memory." }, { "title": "Tips and Tricks for CKAD exam", "url": "/posts/CKAD-Trips-and-Tricks/", "categories": "Technology, Kubernetes", "tags": "CKAD", "date": "2021-06-20 22:00:00 +0530", "snippet": "I had appeared for Certified Kubernetes Application Developer (CKAD) exam and cleared it successfully. The Certified Kubernetes Application Developer exam certifies that users can design, build, configure, and expose cloud native applications for Kubernetes.A Certified Kubernetes Application Developer can define application resources and use core primitives to build, monitor, and troubleshoot scalable applications and tools in Kubernetes.It is an open-book exam.The online, proctored, performance-based test consists of a set of performance-based items (problems) to be solved in a command line and is expected to take approximately two (2) hours to complete.This exam curriculum includes these general domains and their weights on the exam: 13% – Core Concepts 18% – Configuration 10% – Multi-Container Pods 18% – Observability 20% – Pod Design 13% – Services &amp;amp; Networking 8% – State PersistenceI would not delve into tips of exam which are pretty much out there in tons of the other articles. I would like to highlight points whatever I felt were missing out according to me.Below are my two cents advice which might be helpful: First and foremost, if you are not familiar or don’t have exposure to Linux operating system/Linux terminal commands then I would recommend taking a crash course on Linux.I would suggest this LinkedIn learning course. Knowledge of the Linux command line is critical for anyone who uses this open-source operating system. For many tasks… Imminently, practice is the key for the exam. Try to skip questions with low weightage by flagging them and attend them towards end if time permits. Time management is the key for the exam. Go through all “Tasks” section of official Kubernetes documentation page. If possible, bookmark all tasks accordingly as they would be handy for quick search. A set of exercises that helped me prepare for the Certified Kubernetes Application Developer. Practice below questions from below GitHub repository: dgkanatsios/CKAD-exercises Few of Linux flags which I had made notes Example:grep -i ‘annotations’-i -&amp;gt; case insensitivity echo -e ‘var1=val1\\n var2=val2’The ‘-e‘ option in Linux acts as interpretation of escaped characters that are backslashed. echo -n-n option can be used to remove the ‘\\n’ (newline character) from the output. By default, echo includes ‘\\n’ at the end of every string it outputs If you practice with Vim editor below trips would be helpful. $ goes to the end of line, remains in command mode ‘A’ goes to the end of line, switches to insert mode ‘dd’ cuts a line To jump to particular line — In command mode type line number followed by ‘G’ ‘dG’ — Deletes contents from cursor to end of file. This is very useful when editing YAML files. ‘ZZ’ — Save and exit quickly. ‘3yy’ — Yank (copy) three lines, starting from the line where the cursor is positioned. Concentrate on difference between CMD and ENTRYPOINT difference in docker. Again I would recommend Zeal Vora’s course for this. Remember to memorize the options for “kubectl run” rather than using “explain” command kubectl run NAME — image=image [ — env=”key=value”] [ — port=port] [ — dry-run=server|client] [ — overrides=inline-json] [ — command] — [COMMAND] [args…] [options] Use kubectl ‘Explain’ command with recursive flag and ‘less’ as shown. This would help to show output without overwhelming text throughout the terminal. kubectl explain cronjob.spec.jobTemplate — recursive | less Persistent Volume (PV), Persistent Volume Claim(PVC) and NetworkPolicy objects cannot be created using imperative commands hence remember write yaml from scratch. Concentrate on logging feature of k8’s. Logging pattern with Adaptor/Side car container pattern would be helpful. I would recommend Zeal Vora’s CKAD course on Udemy for this topics as he has covered all topics on logging pretty well. VIM settings edit with “vi ~/.vimrc” set nuautocmd FileType yaml setlocal et ts=2 ai sw=2 nu sts=0set paste Use “Ctrl+d” to exit a container when you are running bash shell on a container inside a pod or type ‘exit’ To indent multiple lines using vim you should set the shiftwidth using :set shiftwidth=2. Then mark multiple lines using Shift v and the up/down keys.To then indent the marked lines to Shift . or Shift , Practice exams from killer.sh. Questions from here are more tougher than the ones which appear in exam. Please dont assume that this is some sort of question dumps for exam.Wishing you the best of luck if you are planning to take up the exam! Feel free to connect with me for any queries :)" }, { "title": "Study guide for AZ-204 Azure Developer Associate", "url": "/posts/AZ-204-Study-Guide/", "categories": "Technology, Azure", "tags": "AZ204", "date": "2021-06-19 17:10:00 +0530", "snippet": "About Microsoft Azure and AZ 204 examMicrosoft Azure cloud platform is on the rise these days. Gone are the days when Amazon Web Services(AWS) was the impeccable industry leader in terms of Cloud computing market share. Microsoft has struck several strategic partnerships with companies and because Microsoft understands the enterprise ecosystem very well (thanks to its MS Office suite and other products) it is steadily catching up with AWS. Microsoft has started to embrace Open Source technologies and this has been a game-changer for Azure as well. Making .NET framework as a Cross-platform and going Open Source route through a lightweight .NET Core has revolutionized Microsoft Azure market share. NET Core combined with Linux forms a formidable rival to other frameworks in the market. If you are a .NET developer or someone who is exploring Microsoft Cloud capabilities then it makes absolute sense to take up this certification exam. Coming to the exam itself, as mentioned in Microsoft official website, the exam is classified into five domains: Develop Azure compute solutions (25–30%) Develop for Azure storage (10–15%) Implement Azure security (15–20%) Monitor, troubleshoot, and optimize Azure solutions (10–15%) Connect to and consume Azure services and third-party services (25–30%)LearningI followed along an Udemy course from Alan Rodrigues titled“AZ-203/204-Developing Solutions for Azure-UPDATED 2020” in UdemyAZ-203/204 — Developing Solutions for Azure — UPDATED 2020It is one of the most comprehensive courses out there in the market. Alan ensures that he covers allthe subtopics mentioned in the exam objective. Literally, he has covered all topics with labs/hands-on. Please refer below URL to see the complete set of topics required for the exam. The course might seem overwhelming initially as it is of 22 hours of content but trust me it’s worth investing 22 hours to learn concepts required for an Azure developer and his practice tests are top-notch. There are quite a few other courses on Udemy which touch base concepts on a very high level which might not be sufficient to clear the exam.Exam topics for AZ 204 by domainExamExam duration is of 180 minutes to answer questions ranging from 48 to 55 depending on each individual. Online exam proctoring went smoothly without any glitches and my proctor was kind enough in his approach for me. In my case, there were 48 questions that were divided into 3 sections and once you complete each section you cannot navigate to the previous section. Hence please review each section before submitting and moving on to the next section: The first section had 24 multiple-choice questions (MCQs). The second section had 2 case studies covering around 14 questions The third section had 10 scenario-based questions where one would be presented with different scenarios and candidate should be able to evaluate if statements meet the requirement given in the questionPlease read case study requirements carefully and catch the keywords given in appropriate sections(Requirements/Issues/Architecture etc) and then try linking it with case study question.Familiarize yourself with AZ CLI and Powershell CLI commands to create/modify resources as it is important from exam point of viewTo pass the exam candidate has to secure 700/1000 marks and according to me time will not be a constraint for this exam and whatever duration given is self-sufficient. That’s all for now folks.Happy reading :)Finally, here it is: my exam certification 😊All the best if you are preparing for this exam!. Please feel free to connect with me if you have any further questions" } ]
